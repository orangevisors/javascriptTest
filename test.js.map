{"version":3,"file":"test.js","sources":["../src/test.ts"],"sourcesContent":["import test from \"ava\";\nimport \"@k2oss/k2-broker-core/test-framework\";\nimport \"./index\";\n\nfunction mock(name: string, value: any) {\n  global[name] = value;\n}\n\ntest(\"describe returns the hardcoded instance\", async (t) => {\n  let schema = null;\n  mock(\"postSchema\", function (result: any) {\n    schema = result;\n  });\n\n  await Promise.resolve<void>(\n    ondescribe({\n      configuration: {},\n    })\n  );\n\n  t.deepEqual(schema, {\n    objects: {\n      todo: {\n        displayName: \"TODO\",\n        description: \"Manages a TODO list\",\n        properties: {\n          id: {\n            displayName: \"ID\",\n            type: \"number\",\n          },\n          userId: {\n            displayName: \"User ID\",\n            type: \"number\",\n          },\n          title: {\n            displayName: \"Title\",\n            type: \"string\",\n          },\n          completed: {\n            displayName: \"Completed\",\n            type: \"boolean\",\n          },\n        },\n        methods: {\n          get: {\n            displayName: \"Get TODO\",\n            type: \"read\",\n            inputs: [\"id\"],\n            outputs: [\"id\", \"userId\", \"title\", \"completed\"],\n          },\n          getParams: {\n            displayName: \"Get TODO\",\n            type: \"read\",\n            parameters: {\n              pid: {\n                displayName: \"param1\",\n                description: \"Description Of Param 1\",\n                type: \"number\",\n              },\n            },\n            requiredParameters: [\"pid\"],\n            outputs: [\"id\"],\n          },\n        },\n      },\n    },\n  });\n\n  t.pass();\n});\n\ntest(\"execute fails with the wrong parameters\", async (t) => {\n  let error = await t.throwsAsync(\n    Promise.resolve<void>(\n      onexecute({\n        objectName: \"test1\",\n        methodName: \"unused\",\n        parameters: {},\n        properties: {},\n        configuration: {},\n        schema: {},\n      })\n    )\n  );\n\n  t.deepEqual(error.message, \"The object test1 is not supported.\");\n\n  error = await t.throwsAsync(\n    Promise.resolve<void>(\n      onexecute({\n        objectName: \"todo\",\n        methodName: \"test2\",\n        parameters: {},\n        properties: {},\n        configuration: {},\n        schema: {},\n      })\n    )\n  );\n\n  t.deepEqual(error.message, \"The method test2 is not supported.\");\n\n  t.pass();\n});\n\ntest(\"execute passes with method params\", async (t) => {\n  let result: any = null;\n  function pr(r: any) {\n    result = r;\n  }\n\n  mock(\"postResult\", pr);\n\n  await Promise.resolve<void>(\n    onexecute({\n      objectName: \"todo\",\n      methodName: \"getParams\",\n      parameters: {\n        pid: 456,\n      },\n      properties: {},\n      configuration: {},\n      schema: {},\n    })\n  );\n\n  t.deepEqual(result, {\n    id: 456,\n  });\n\n  t.pass();\n});\n\ntest(\"execute passes\", async (t) => {\n  let xhr: { [key: string]: any } = null;\n  class XHR {\n    public onreadystatechange: () => void;\n    public readyState: number;\n    public status: number;\n    public responseText: string;\n    private recorder: { [key: string]: any };\n\n    constructor() {\n      xhr = this.recorder = {};\n      this.recorder.headers = {};\n    }\n\n    open(method: string, url: string) {\n      this.recorder.opened = { method, url };\n    }\n\n    setRequestHeader(key: string, value: string) {\n      this.recorder.headers[key] = value;\n    }\n\n    send() {\n      queueMicrotask(() => {\n        this.readyState = 4;\n        this.status = 200;\n        this.responseText = JSON.stringify({\n          id: 123,\n          userId: 51,\n          title: \"Groceries\",\n          completed: false,\n        });\n        this.onreadystatechange();\n        delete this.responseText;\n      });\n    }\n  }\n\n  mock(\"XMLHttpRequest\", XHR);\n\n  let result: any = null;\n  function pr(r: any) {\n    result = r;\n  }\n\n  mock(\"postResult\", pr);\n\n  await Promise.resolve<void>(\n    onexecute({\n      objectName: \"todo\",\n      methodName: \"get\",\n      parameters: {},\n      properties: {\n        id: 123,\n      },\n      configuration: {},\n      schema: {},\n    })\n  );\n\n  t.deepEqual(xhr, {\n    opened: {\n      method: \"GET\",\n      url: \"https://jsonplaceholder.typicode.com/todos/123\",\n    },\n    headers: {\n      test: \"test value\",\n    },\n  });\n\n  t.deepEqual(result, {\n    id: 123,\n    userId: 51,\n    title: \"Groceries\",\n    completed: false,\n  });\n\n  t.pass();\n});\n"],"names":["mock","name","value","global","test","async","schema","result","Promise","resolve","ondescribe","configuration","t","deepEqual","objects","todo","displayName","description","properties","id","type","userId","title","completed","methods","get","inputs","outputs","getParams","parameters","pid","requiredParameters","pass","error","throwsAsync","onexecute","objectName","methodName","message","r","xhr","constructor","this","recorder","headers","open","method","url","opened","setRequestHeader","key","send","queueMicrotask","readyState","status","responseText","JSON","stringify","onreadystatechange"],"mappings":"wLAIA,SAASA,EAAKC,EAAcC,GAC1BC,OAAOF,GAAQC,EAGjBE,UAAK,0CAA2CC,MAAAA,QAC1CC,EAAS,KACbN,EAAK,cAAc,SAAUO,GAC3BD,EAASC,WAGLC,QAAQC,QACZC,WAAW,CACTC,cAAe,MAInBC,EAAEC,UAAUP,EAAQ,CAClBQ,QAAS,CACPC,KAAM,CACJC,YAAa,OACbC,YAAa,sBACbC,WAAY,CACVC,GAAI,CACFH,YAAa,KACbI,KAAM,UAERC,OAAQ,CACNL,YAAa,UACbI,KAAM,UAERE,MAAO,CACLN,YAAa,QACbI,KAAM,UAERG,UAAW,CACTP,YAAa,YACbI,KAAM,YAGVI,QAAS,CACPC,IAAK,CACHT,YAAa,WACbI,KAAM,OACNM,OAAQ,CAAC,MACTC,QAAS,CAAC,KAAM,SAAU,QAAS,cAErCC,UAAW,CACTZ,YAAa,WACbI,KAAM,OACNS,WAAY,CACVC,IAAK,CACHd,YAAa,SACbC,YAAa,yBACbG,KAAM,WAGVW,mBAAoB,CAAC,OACrBJ,QAAS,CAAC,YAOpBf,EAAEoB,SAGJ5B,UAAK,0CAA2CC,MAAAA,QAC1C4B,QAAcrB,EAAEsB,YAClB1B,QAAQC,QACN0B,UAAU,CACRC,WAAY,QACZC,WAAY,SACZR,WAAY,GACZX,WAAY,GACZP,cAAe,GACfL,OAAQ,OAKdM,EAAEC,UAAUoB,EAAMK,QAAS,sCAE3BL,QAAcrB,EAAEsB,YACd1B,QAAQC,QACN0B,UAAU,CACRC,WAAY,OACZC,WAAY,QACZR,WAAY,GACZX,WAAY,GACZP,cAAe,GACfL,OAAQ,OAKdM,EAAEC,UAAUoB,EAAMK,QAAS,sCAE3B1B,EAAEoB,SAGJ5B,UAAK,oCAAqCC,MAAAA,QACpCE,EAAc,KAKlBP,EAAK,uBAJOuC,GACVhC,EAASgC,WAKL/B,QAAQC,QACZ0B,UAAU,CACRC,WAAY,OACZC,WAAY,YACZR,WAAY,CACVC,IAAK,KAEPZ,WAAY,GACZP,cAAe,GACfL,OAAQ,MAIZM,EAAEC,UAAUN,EAAQ,CAClBY,GAAI,MAGNP,EAAEoB,SAGJ5B,UAAK,iBAAkBC,MAAAA,QACjBmC,EAA8B,KAqClCxC,EAAK,uBA7BHyC,cACED,EAAME,KAAKC,SAAW,QACjBA,SAASC,QAAU,GAG1BC,KAAKC,EAAgBC,QACdJ,SAASK,OAAS,CAAEF,OAAAA,EAAQC,IAAAA,GAGnCE,iBAAiBC,EAAahD,QACvByC,SAASC,QAAQM,GAAOhD,EAG/BiD,OACEC,eAAe,UACRC,WAAa,OACbC,OAAS,SACTC,aAAeC,KAAKC,UAAU,CACjCtC,GAAI,IACJE,OAAQ,GACRC,MAAO,YACPC,WAAW,SAERmC,4BACEhB,KAAKa,sBAOdhD,EAAc,KAKlBP,EAAK,uBAJOuC,GACVhC,EAASgC,WAKL/B,QAAQC,QACZ0B,UAAU,CACRC,WAAY,OACZC,WAAY,MACZR,WAAY,GACZX,WAAY,CACVC,GAAI,KAENR,cAAe,GACfL,OAAQ,MAIZM,EAAEC,UAAU2B,EAAK,CACfQ,OAAQ,CACNF,OAAQ,MACRC,IAAK,kDAEPH,QAAS,CACPxC,KAAM,gBAIVQ,EAAEC,UAAUN,EAAQ,CAClBY,GAAI,IACJE,OAAQ,GACRC,MAAO,YACPC,WAAW,IAGbX,EAAEoB"}